USE MAVENMOVIES;
-- Q1. Rank the customers based on the total amount they've spent on rentals
SELECT customer_id,rental_id,rank() over(order by rental_id) AS Rank_ ,sum(amount) over(partition by rental_id) AS TOTAL FROM payment;

-- Q2. Calculate the cumulative revenue generated by each film over time
SELECT film_id,title,sum(rental_rate) over(order by rental_rate) AS Revenue FROM film;

-- Q3. Determine the average rental duration for each film, considering films with similar lengths
SELECT title,length,avg(rental_duration) over(partition by length) AS Average FROM film;

-- Q4. Identify the top 3 films in each category based on their rental counts.


-- Q5.Calculate the difference in rental counts between each customer's total rentals and the average rentals 
-- across all customers.**


-- Q6.Find the monthly revenue trend for the entire rental store over time.**


-- Q7.Identify the customers whose total spending on rentals falls within the top 20% of all customers.**
SELECT customer_id,CONCAT(first_name,' ',last_name) AS Full_Name,total_amount_spend FROM (SELECT c.customer_id,c.first_name,c.last_name,
Sum(p.amount)AS total_amount_spend,percent_RANK() OVER(ORDER BY SUM(p.amount)DESC) AS pct_rank FROM customer c JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY c.customer_id) ranked_customer WHERE pct_rank <= 0.2
ORDER BY total_amount_spend DESC;

-- Q8.Calculate the running total of rentals per category, ordered by rental count.**


-- Q9.Find the films that have been rented less than the average rental count for their respective categories.**


-- Q10.Identify the top 5 months with the highest revenue and display the revenue generated in each month.